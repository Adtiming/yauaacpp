#
# Yet Another UserAgent Analyzer
# Copyright (C) 2013-2021 Niels Basjes
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an AS IS BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
config:

# Android / Chrome devices usually have a comment entry like "<Device tag> BUILD/<OSBuild>"

- matcher:
    extract:
    - 'OperatingSystemVersionBuild         :       80 :agent.(1-2)product.(1)comments.entry.(1-4)product.name[1]="Build"^.version'

- matcher:
    extract:
    - 'OperatingSystemVersionBuild         :       80 :agent.(1-2)product.(1)comments.entry.(1-4)product.name[2]="Build"^.version'

- matcher:
    extract:
    - 'OperatingSystemVersionBuild         :       80 :agent.(1-2)product.(1)comments.entry.(1-4)product.name[3]="Build"^.version'

- matcher:
    extract:
    - 'OperatingSystemVersionBuild         :       80 :agent.(1-2)product.(1)comments.entry.(1-4)product.name[4]="Build"^.version'

- matcher:
    extract:
    - 'OperatingSystemVersionBuild         :       80 :agent.(1-2)product.(1)comments.entry.(1-4)product.name[5]="Build"^.version'

- matcher:
    extract:
    - 'OperatingSystemVersionBuild         :       80 :agent.(1-2)product.(1)comments.entry.(1-4)product.name[6]="Build"^.version'

# In some cases the version of the BUILD starts with the Brand name
- matcher:
    extract:
    - 'DeviceBrand                         :      303 :LookUpPrefix[MobileBrands;agent.(1-2)product.(1)comments.entry.(1-4)product.name[1]="Build"^.version]'

- matcher:
    extract:
    - 'DeviceBrand                         :      303 :LookUpPrefix[MobileBrands;agent.(1-2)product.(1)comments.entry.(1-4)product.name[2]="Build"^.version]'

- matcher:
    extract:
    - 'DeviceBrand                         :      303 :LookUpPrefix[MobileBrands;agent.(1-2)product.(1)comments.entry.(1-4)product.name[3]="Build"^.version]'

- matcher:
    extract:
    - 'DeviceBrand                         :      303 :LookUpPrefix[MobileBrands;agent.(1-2)product.(1)comments.entry.(1-4)product.name[4]="Build"^.version]'

- matcher:
    extract:
    - 'DeviceBrand                         :      303 :LookUpPrefix[MobileBrands;agent.(1-2)product.(1)comments.entry.(1-4)product.name[5]="Build"^.version]'

- matcher:
    extract:
    - 'DeviceBrand                         :      303 :LookUpPrefix[MobileBrands;agent.(1-2)product.(1)comments.entry.(1-4)product.name[6]="Build"^.version]'

# Basic initial assumption: The first word is the brand

- matcher:
    extract:
    - 'DeviceBrand                         :      500 :LookUp[MobileBrands;agent.(1)product.(1)comments.entry.(1-2)text]'


- matcher:
    variable:
    - 'BuildString                         :agent.(1-2)product.(1)comments.entry[2]="Build"@'
    extract:
    - 'DeviceName                          :      301 :@BuildString[-1]'
    - 'DeviceBrand                         :        1 :"<<<null>>>"'

- matcher:
    variable:
    - 'BuildString                         :agent.(1-2)product.(1)comments.entry[3]="Build"@'
    extract:
    - 'DeviceName                          :      301 :@BuildString[-2]'
    - 'DeviceBrand                         :        1 :NormalizeBrand[@BuildString[1]]'

- matcher:
    variable:
    - 'BuildString                         :agent.(1-2)product.(1)comments.entry[4]="Build"@'
    extract:
    - 'DeviceName                          :      301 :@BuildString[-3]'
    - 'DeviceBrand                         :        1 :NormalizeBrand[@BuildString[1]]'

- matcher:
    variable:
    - 'BuildString                         :agent.(1-2)product.(1)comments.entry[5]="Build"@'
    extract:
    - 'DeviceName                          :      301 :@BuildString[-4]'
    - 'DeviceBrand                         :        1 :NormalizeBrand[@BuildString[1]]'

- matcher:
    variable:
    - 'BuildString                         :agent.(1-2)product.(1)comments.entry[6]="Build"@'
    extract:
    - 'DeviceName                          :      301 :@BuildString[-5]'
    - 'DeviceBrand                         :        1 :NormalizeBrand[@BuildString[1]]'

- matcher:
    variable:
    - 'BuildString                         :agent.(1-2)product.(1)comments.entry[7]="Build"@'
    extract:
    - 'DeviceName                          :      301 :@BuildString[-6]'
    - 'DeviceBrand                         :        1 :NormalizeBrand[@BuildString[1]]'

- matcher:
    variable:
    - 'BuildString                         :agent.(1-2)product.(1)comments.entry[8]="Build"@'
    extract:
    - 'DeviceName                          :      301 :@BuildString[-7]'
    - 'DeviceBrand                         :        1 :NormalizeBrand[@BuildString[1]]'


# Same as above but now we try to match the prefix to see if we recognise a brand.

- matcher:
    variable:
    - 'BuildString                         :agent.(1-2)product.(1)comments.entry[2]="Build"@'
    extract:
    - 'DeviceName                          :      302 :@BuildString[-1]'
    - 'DeviceBrand                         :      324 :LookUpPrefix[MobileBrandPrefixes;@BuildString]'

- matcher:
    variable:
    - 'BuildString                         :agent.(1-2)product.(1)comments.entry[3]="Build"@'
    extract:
    - 'DeviceName                          :      302 :@BuildString[-2]'
    - 'DeviceBrand                         :      324 :LookUpPrefix[MobileBrandPrefixes;@BuildString]'

- matcher:
    variable:
    - 'BuildString                         :agent.(1-2)product.(1)comments.entry[4]="Build"@'
    extract:
    - 'DeviceName                          :      302 :@BuildString[-3]'
    - 'DeviceBrand                         :      324 :LookUpPrefix[MobileBrandPrefixes;@BuildString]'

- matcher:
    variable:
    - 'BuildString                         :agent.(1-2)product.(1)comments.entry[5]="Build"@'
    extract:
    - 'DeviceName                          :      302 :@BuildString[-4]'
    - 'DeviceBrand                         :      324 :LookUpPrefix[MobileBrandPrefixes;@BuildString]'

- matcher:
    variable:
    - 'BuildString                         :agent.(1-2)product.(1)comments.entry[6]="Build"@'
    extract:
    - 'DeviceName                          :      302 :@BuildString[-5]'
    - 'DeviceBrand                         :      324 :LookUpPrefix[MobileBrandPrefixes;@BuildString]'

- matcher:
    variable:
    - 'BuildString                         :agent.(1-2)product.(1)comments.entry[7]="Build"@'
    extract:
    - 'DeviceName                          :      302 :@BuildString[-6]'
    - 'DeviceBrand                         :      324 :LookUpPrefix[MobileBrandPrefixes;@BuildString]'

- matcher:
    variable:
    - 'BuildString                         :agent.(1-2)product.(1)comments.entry[8]="Build"@'
    extract:
    - 'DeviceName                          :      302 :@BuildString[-7]'
    - 'DeviceBrand                         :      324 :LookUpPrefix[MobileBrandPrefixes;@BuildString]'

# Same as above but now we try to match the prefix to see if we recognise a LITERAL brand.

- matcher:
    variable:
    - 'BuildString                         :agent.(1-2)product.(1)comments.entry[2]="Build"@'
    extract:
    - 'DeviceBrand                         :      325 :LookUpPrefix[MobileBrands;@BuildString]'

- matcher:
    variable:
    - 'BuildString                         :agent.(1-2)product.(1)comments.entry[3]="Build"@'
    extract:
    - 'DeviceBrand                         :      325 :LookUpPrefix[MobileBrands;@BuildString]'

- matcher:
    variable:
    - 'BuildString                         :agent.(1-2)product.(1)comments.entry[4]="Build"@'
    extract:
    - 'DeviceBrand                         :      325 :LookUpPrefix[MobileBrands;@BuildString]'

- matcher:
    variable:
    - 'BuildString                         :agent.(1-2)product.(1)comments.entry[5]="Build"@'
    extract:
    - 'DeviceBrand                         :      325 :LookUpPrefix[MobileBrands;@BuildString]'

- matcher:
    variable:
    - 'BuildString                         :agent.(1-2)product.(1)comments.entry[6]="Build"@'
    extract:
    - 'DeviceBrand                         :      325 :LookUpPrefix[MobileBrands;@BuildString]'

- matcher:
    variable:
    - 'BuildString                         :agent.(1-2)product.(1)comments.entry[7]="Build"@'
    extract:
    - 'DeviceBrand                         :      325 :LookUpPrefix[MobileBrands;@BuildString]'

- matcher:
    variable:
    - 'BuildString                         :agent.(1-2)product.(1)comments.entry[8]="Build"@'
    extract:
    - 'DeviceBrand                         :      325 :LookUpPrefix[MobileBrands;@BuildString]'


# Chrome 70+ on Android no longer has the BUILD/... part
- matcher:
    variable:
    - 'DeviceName                          :IsInLookUpPrefix[MobileBrandPrefixes;agent.(1)product.(1)comments.entry]'
    require:
    - 'IsNull[@DeviceName~"BUILD"]'
    extract:
    - 'DeviceBrand                         :      326 :LookUpPrefix[MobileBrandPrefixes;@DeviceName]'
    - 'DeviceName                          :      326 :@DeviceName'

- matcher:
    variable:
    - 'DeviceName                          :IsInLookUp[ExactMatchMobileBrands;agent.(1)product.(1)comments.entry.(1)product.(1)name[1]]'
    extract:
    - 'DeviceBrand                         :      327 :LookUp[ExactMatchMobileBrands;@DeviceName]'
    - 'DeviceName                          :      327 :@DeviceName'

- matcher:
    variable:
    - 'DeviceName                          :IsInLookUpPrefix[MobileBrands;agent.(1)product.(1)comments.entry]'
    require:
    - 'IsNull[@DeviceName~"BUILD"]'
    extract:
    - 'DeviceBrand                         :      327 :LookUpPrefix[MobileBrands;@DeviceName]'
    - 'DeviceName                          :      320 :@DeviceName'

- matcher:
    extract:
    - 'DeviceBrand                         :      328 :LookUp[MobileBrands;agent.(1)product.(1)comments.entry.(1-2)text]'
    - 'DeviceName                          :      321 :LookUpPrefix[MobileBrandPrefixes;agent.(1)product.(1)comments.entry]'

# Special case
- matcher:
    require:
    - 'agent.(1)product.(1)comments.entry="Microsoft"'
    extract:
    - 'DeviceBrand                         :      327 :"Microsoft"'


# In the entry there is a secondary product which is called "BUILD"
- matcher:
    variable:
    - 'DeviceName                          :agent.(1-2)product.(1)comments.entry.(2-)product.name="Build"^^.(1)product'
    extract:
    - 'DeviceClass                         :        2 :"Mobile"'
    - 'DeviceName                          :       81 :@DeviceName'
    - 'DeviceBrand                         :       81 :@DeviceName[1]'

- matcher:
    variable:
    - 'DeviceName                          :agent.(1-2)product.(1)comments.entry.(2-)product.name="Build"^^.(1)product'
    extract:
    - 'DeviceClass                         :        2 :"Mobile"'
    - 'DeviceName                          :       81 :@DeviceName'
    - 'DeviceBrand                         :       82 :LookUpPrefix[MobileBrandPrefixes;@DeviceName[1]]'


- matcher:
    variable:
    - 'DeviceName                          :agent.(1-2)product.(1)comments.entry.(2-)product.name[2]="Build"^^.(1)product'
    extract:
    - 'DeviceClass                         :        2 :"Mobile"'
    - 'DeviceName                          :       81 :@DeviceName'
    - 'DeviceBrand                         :       81 :@DeviceName[1]'

- matcher:
    variable:
    - 'DeviceName                          :agent.(1-2)product.(1)comments.entry.(2-)product.name[2]="Build"^^.(1)product'
    extract:
    - 'DeviceClass                         :        2 :"Mobile"'
    - 'DeviceName                          :       81 :@DeviceName'
    - 'DeviceBrand                         :       82 :LookUpPrefix[MobileBrandPrefixes;@DeviceName[1]]'



- matcher:
    variable:
    - 'DeviceName                          :agent.(1-2)product.(1)comments.entry.(2-)product.name[3]="Build"^^.(1)product'
    extract:
    - 'DeviceClass                         :        2 :"Mobile"'
    - 'DeviceName                          :       81 :@DeviceName'
    - 'DeviceBrand                         :       81 :@DeviceName[1]'

- matcher:
    variable:
    - 'DeviceName                          :agent.(1-2)product.(1)comments.entry.(2-)product.name[3]="Build"^^.(1)product'
    extract:
    - 'DeviceClass                         :        2 :"Mobile"'
    - 'DeviceName                          :       81 :@DeviceName'
    - 'DeviceBrand                         :       82 :LookUpPrefix[MobileBrandPrefixes;@DeviceName[1]]'

# ===================================================================================================

# Root level device information

- matcher:
    variable:
    - 'DeviceModelLine                     :IsInLookUpPrefix[MobileBrandPrefixes;agent.(1-2)product.name]'
    require:
    - 'IsNull[agent.(1-2)product.comments.entry.product.name[1]="Android"]'
    - 'IsNull[agent.(1-2)product.comments.entry.product.name[1]="Windows"]'
    - 'IsNull[LookUp[MobileBrands;@DeviceModelLine]]' # Only use this if the name IS NOT exactly the brand
    extract:
    - 'DeviceBrand                         :      313 :LookUpPrefix[MobileBrandPrefixes;@DeviceModelLine]'
    - 'DeviceName                          :      313 :@DeviceModelLine'

- matcher:
    variable:
    - 'DeviceModelLine                     :IsInLookUpPrefix[MobileBrands;agent.product.name]'
    require:
    - 'IsNull[agent.(1-2)product.comments.entry.product.name[1]="Android"]'
    - 'IsNull[agent.(1-2)product.comments.entry.product.name[1]="Windows"]'
    - 'IsNull[LookUp[MobileBrands;@DeviceModelLine]]' # Only use this if the name IS NOT exactly the brand
    extract:
    - 'DeviceBrand                         :      313 :LookUpPrefix[MobileBrands;@DeviceModelLine]'
    - 'DeviceName                          :      313 :@DeviceModelLine'

- matcher:
    variable:
    - 'DeviceModelLine                     :IsInLookUpPrefix[MobileBrands;agent.(1-2)product.name]'
    require:
    - 'IsNull[agent.(1-2)product.comments.entry.product.name[1]="Android"]'
    - 'LookUp[MobileBrands;@DeviceModelLine]' # Only use this if the name IS exactly the brand
    extract:
    - 'DeviceBrand                         :      324 :LookUpPrefix[MobileBrands;@DeviceModelLine]'
    - 'DeviceName                          :      324 :@DeviceModelLine^.version'

# ===================================================================================================

# Very deep device information
- matcher:
    variable:
    - 'DeviceModelLine                     :IsInLookUpPrefix[MobileBrands;agent.(1-2)product.(1)comments.entry.(1-2)comments.entry.(1)product.name]'
    extract:
    - 'DeviceBrand                         :     1299 :LookUpPrefix[MobileBrands;@DeviceModelLine]'
    - 'DeviceName                          :     1299 :@DeviceModelLine^.version'

# ===================================================================================================

# Single product very deep versioning situation
- matcher:
    variable:
    - 'VersionTag                          :IsInLookUpPrefix[MobileBrandPrefixes;agent.(1)product.(4-7)version]'
    require:
    - 'IsNull[LookUp[MobileBrands;@VersionTag]]' # Only use this if the name IS NOT exactly the brand
    extract:
    - 'DeviceBrand                         :      313 :LookUpPrefix[MobileBrandPrefixes;@VersionTag]'
    - 'DeviceName                          :      313 :@VersionTag'


# Special case like
- matcher:
    variable:
    - 'VersionTag                          :IsInLookUpPrefix[MobileBrandPrefixes;agent.product.(2)version]'
    require:
    - 'IsNull[LookUp[MobileBrands;@VersionTag]]' # Only use this if the name IS NOT exactly the brand
    extract:
    - 'DeviceBrand                         :      313 :LookUpPrefix[MobileBrandPrefixes;@VersionTag]'
    - 'DeviceName                          :      313 :@VersionTag'
    - 'DeviceVersion                       :      313 :@VersionTag^.(3)version'

- matcher:
    variable:
    - 'VersionTag                          :IsInLookUpPrefix[MobileBrands;agent.product.(2)version]'
    require:
    - 'IsNull[LookUp[MobileBrands;@VersionTag]]' # Only use this if the name IS NOT exactly the brand
    extract:
    - 'DeviceBrand                         :      313 :LookUpPrefix[MobileBrands;@VersionTag]'
    - 'DeviceName                          :      313 :@VersionTag'
    - 'DeviceVersion                       :      313 :@VersionTag^.(3)version'

- matcher:
    variable:
    - 'DeviceTag                           :agent.(1)product.(1)comments.(3)entry.product'
    - 'Brand                               :@DeviceTag.name'
    - 'DeviceName                          :@DeviceTag.version'
    require:
    - '@Brand!~"Build"'
    - 'agent.(1)product.(1)comments.(1)entry="Linux"'
    - 'agent.(1)product.(1)comments.(2)entry.product.name="Android"'
    - 'IsNull[agent.(1)product.(1)comments.(4)entry]'
    - 'IsNull[LookUp[MobileBrands;@Brand]]' # Only use this if the brand we found is "unknown"
    extract:
    - 'DeviceBrand                         :       17 :@DeviceTag.name'
    - 'DeviceName                          :       17 :@DeviceTag.version'
